project(@target_name@_PROJECT)
cmake_minimum_required(VERSION @CMAKE_MINIMUM_REQUIRED_VERSION@)
enable_language(Fortran)
include(@CMAKE_CURRENT_FUNCTION_LIST_DIR@/AddTargetsFromFile.cmake)
message(STATUS "target_name = @target_name@, ${CMAKE_CURRENT_BINARY_DIR}")
message(STATUS "EXTERNAL: CMAKE_Fortran_IMPLICIT_LINK_LIBRARIES = ${CMAKE_Fortran_IMPLICIT_LINK_LIBRARIES}")
message(STATUS "EXTERNAL: CMAKE_Fortran_IMPLICIT_LINK_DIRECTORIES = ${CMAKE_Fortran_IMPLICIT_LINK_DIRECTORIES}")
set(CMAKE_VERBOSE_MAKEFILE @CMAKE_VERBOSE_MAKEFILE@)
set(CMAKE_C_OUTPUT_EXTENSION @CMAKE_C_OUTPUT_EXTENSION@)
set(CMAKE_Fortran_OUTPUT_EXTENSION @CMAKE_C_OUTPUT_EXTENSION@)
set(libraries @ARGS_LIBRARIES@)
set(includes @ARGS_INCLUDES@)
set(library_type @library_type@)
set(external_target_file @external_target_file@)
add_library(@target_name@ @final_library_type@ @external_sources@)
set_target_properties(
        @target_name@ PROPERTIES
	COMPILE_FLAGS "@final_library_flags@"
	Fortran_STANDARD 2003
	Fortran_STANDARD_REQUIRED ON
	Fortran_MODULE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
if(WIN32)
    set_target_properties(@target_name@
        PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS ON)
endif()
target_link_from_file(@target_name@ PUBLIC @target_file@)
if(libraries)
    message(STATUS "Linking libraries ${libraries}")
    target_link_libraries(@target_name@ PUBLIC ${libraries})
endif()
if(includes)
    message(STATUS "Including directories ${includes}")
    target_include_directories(@target_name@ PUBLIC ${includes})
endif()
if(external_target_file)
    generate_target_file(${external_target_file}
                         EXTRA_LIBRARIES ${CMAKE_Fortran_IMPLICIT_LINK_LIBRARIES}
			 EXTRA_DIRECTORIES ${CMAKE_Fortran_IMPLICIT_LINK_DIRECTORIES}
			 CUSTOM_TARGET "external_targets_@target_name@")
endif()
configure_file(
        @CMAKE_CURRENT_FUNCTION_LIST_DIR@/CMakeAddFortranSubdirectory/copy_obj.cmake.in
	${CMAKE_CURRENT_BINARY_DIR}/copy_obj.cmake
	@ONLY)
add_custom_command(
        TARGET @target_name@
	PRE_LINK
	DEPENDS "external_targets_@target_name@"
	COMMAND ${CMAKE_COMMAND} -E echo "OBJS=$<JOIN:$<TARGET_OBJECTS:@target_name@>,\;>"
	COMMAND ${CMAKE_COMMAND} "-DOBJS=$<JOIN:$<TARGET_OBJECTS:@target_name@>,\;>" -P ${CMAKE_CURRENT_BINARY_DIR}/copy_obj.cmake
	VERBATIM
	COMMAND_EXPAND_LISTS)
if(NOT library_type STREQUAL "OBJECT")
    add_custom_command(
            TARGET @target_name@
	    POST_BUILD
	    COMMAND ${CMAKE_COMMAND} -E copy "$<TARGET_FILE:@target_name@>" @CMAKE_CURRENT_BINARY_DIR@)
    if (WIN32 AND library_type STREQUAL "SHARED")
      add_custom_command(
              TARGET @target_name@
	      POST_BUILD
	      COMMAND ${CMAKE_COMMAND} -E copy "$<TARGET_IMPORT_FILE:@target_name@>" @CMAKE_CURRENT_BINARY_DIR@)
    endif()
endif()