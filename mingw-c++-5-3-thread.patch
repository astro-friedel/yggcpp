--- gcc-5.3.0/libstdc++-v3/include/std/thread.orig	2016-12-11 16:51:54
+++ gcc-5.3.0/libstdc++-v3/include/std/thread.new	2023-10-17 14:40:16
@@ -41,6 +41,7 @@
 #include <bits/functexcept.h>
 #include <bits/functional_hash.h>
 #include <bits/gthr.h>
+#include <iostream>
 
 #if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)
 
@@ -83,9 +84,9 @@
       operator==(thread::id __x, thread::id __y) noexcept
       { return __gthread_equal(__x._M_thread, __y._M_thread); }
 
-      friend bool
-      operator<(thread::id __x, thread::id __y) noexcept
-      { return __x._M_thread < __y._M_thread; }
+      // friend bool
+      // operator<(thread::id __x, thread::id __y) noexcept
+      // { return __x._M_thread < __y._M_thread; }
 
       template<class _CharT, class _Traits>
 	friend basic_ostream<_CharT, _Traits>&
@@ -167,7 +168,9 @@
 
     bool
     joinable() const noexcept
-    { return !(_M_id == id()); }
+    {
+      std::cerr << "joinable _M_id = " << _M_id << ", id() = " << id() << std::endl;
+      return !(_M_id == id()); }
 
     void
     join();
@@ -215,18 +218,18 @@
   operator!=(thread::id __x, thread::id __y) noexcept
   { return !(__x == __y); }
 
-  inline bool
-  operator<=(thread::id __x, thread::id __y) noexcept
-  { return !(__y < __x); }
-
-  inline bool
-  operator>(thread::id __x, thread::id __y) noexcept
-  { return __y < __x; }
+  // inline bool
+  // operator<=(thread::id __x, thread::id __y) noexcept
+  // { return !(__y < __x); }
 
-  inline bool
-  operator>=(thread::id __x, thread::id __y) noexcept
-  { return !(__x < __y); }
+  // inline bool
+  // operator>(thread::id __x, thread::id __y) noexcept
+  // { return __y < __x; }
 
+  // inline bool
+  // operator>=(thread::id __x, thread::id __y) noexcept
+  // { return !(__x < __y); }
+
   // DR 889.
   /// std::hash specialization for thread::id.
   template<>
@@ -245,7 +248,9 @@
       if (__id == thread::id())
 	return __out << "thread::id of a non-executing thread";
       else
-	return __out << __id._M_thread;
+	return __out << __id._M_thread.x;
+	// return __out << __id._M_thread.p;
+	// return __out << std::_Hash_impl::hash(__id._M_thread);
     }
 
 _GLIBCXX_END_NAMESPACE_VERSION
