--- gcc-5.3.0/libstdc++-v3/include/std/thread.orig	2016-12-11 16:51:54
+++ gcc-5.3.0/libstdc++-v3/include/std/thread.new	2023-10-10 14:55:41
@@ -83,9 +83,9 @@
       operator==(thread::id __x, thread::id __y) noexcept
       { return __gthread_equal(__x._M_thread, __y._M_thread); }
 
-      friend bool
-      operator<(thread::id __x, thread::id __y) noexcept
-      { return __x._M_thread < __y._M_thread; }
+      // friend bool
+      // operator<(thread::id __x, thread::id __y) noexcept
+      // { return __x._M_thread < __y._M_thread; }
 
       template<class _CharT, class _Traits>
 	friend basic_ostream<_CharT, _Traits>&
@@ -215,18 +215,18 @@
   operator!=(thread::id __x, thread::id __y) noexcept
   { return !(__x == __y); }
 
-  inline bool
-  operator<=(thread::id __x, thread::id __y) noexcept
-  { return !(__y < __x); }
-
-  inline bool
-  operator>(thread::id __x, thread::id __y) noexcept
-  { return __y < __x; }
+  // inline bool
+  // operator<=(thread::id __x, thread::id __y) noexcept
+  // { return !(__y < __x); }
 
-  inline bool
-  operator>=(thread::id __x, thread::id __y) noexcept
-  { return !(__x < __y); }
+  // inline bool
+  // operator>(thread::id __x, thread::id __y) noexcept
+  // { return __y < __x; }
 
+  // inline bool
+  // operator>=(thread::id __x, thread::id __y) noexcept
+  // { return !(__x < __y); }
+
   // DR 889.
   /// std::hash specialization for thread::id.
   template<>
