#pragma once
#include "ValueItem.hpp"
#include <vector>
#include <numeric>

namespace communication {
namespace datatypes {

std::string joinvalues(const std::vector<size_t> &items, const char &delim) {
    std::vector<std::string> strings;
    strings.reserve(items.size());
    for (auto v : items)
        strings.push_back(std::to_string(v));
    return std::accumulate(strings.begin(), strings.end(), std::string(),
                           [&delim](std::string &x, std::string &y) {
                               return x.empty() ? y : x + delim + y;
                           });
}

template<typename T>
class ValueArray : public ValueItem {
public:
    ValueArray() = delete;
    //ValueArray(std::vector<T> &val, SUBTYPE st, const std::string& unit="", const int& precision=0);
    explicit ValueArray(SUBTYPE st, const size_t& ndim, const size_t dim[], const std::string& un="", const int& precision=0);
    explicit ValueArray(SUBTYPE st, const size_t& ndim, const std::string& un="", const int& precision=0);

    ValueArray(T* val, const size_t &ndim, const size_t dim[], SUBTYPE st, const std::string& unit="", const int& precision=0);
    ~ValueArray();
    using ValueItem::get;
    void get(T* val, size_t &ndim, size_t (&dims)[]);
//    void get(std::vector<T> &val) const;
    void get(T* val, size_t &N, size_t (&dims)[], std::string &un);
//    void get(std::vector<T> &val, std::string& un) const;
    void set(T* val);
    void set(T* val, const size_t dim[], const std::string& un="");
//    void set(std::vector<T> &val);
    void set(T* val, std::string &un);
    void display(const std::string& indent) const override;
    int nargs_exp() const override {return 5;}
    DTYPE getType() const override {return T_NDARRAY;}
    std::ostream& write(std::ostream& out) override;
    std::istream& read(std::istream& in) override;

//    void set(std::vector<T> &val, std::string& un);

//    std::vector<T>& getValue() const;
    T& operator[](const size_t& idx) const;
private:
    T* value;
    const size_t ndim;
    std::vector<size_t> dims;
    std::string to_string() const;
};

template<typename T>
std::ostream& ValueArray<T>::write(std::ostream& out) {
    out << "scalararray " << type << "  " << precision << " " << ndim << " " << joinvalues(dims, ',');
    out << to_string() << std::endl;
    return out;
}

template<typename T>
void walk(std::string& out, T* values,  const size_t& count, const std::vector<size_t>& dims) {

}

template<>
std::string ValueArray<complex_float_t>::to_string() const {
    std::string out = "";
    
    return out;
}

template<>
std::string ValueArray<complex_double_t>::to_string() const {
    std::string out = "";

    return out;
}

template<>
std::string ValueArray<complex_long_double_t>::to_string() const {
    std::string out = "";

    return out;
}


template<typename T>
std::string ValueArray<T>::to_string() const {
    std::string out = "";

    return out;
}

template<typename T>
std::istream& ValueArray<T>::read(std::istream& in) {

}

template<typename T>
void ValueArray<T>::display(const std::string &indent) const {
    printf("%s%-15s = %s\n", indent.c_str(), "type", "ARRAY");
    printf("%s%-15s = %s\n", indent.c_str(), "subtype", mapsub.at(type).c_str());
    printf("%s%-15s = %d\n", indent.c_str(), "precision", precision);
    printf("%s%-15s = %zu\n", indent.c_str(), "dimensions", ndim);
    //printf("%s%-15s = %s\n");

}
template<>
ValueArray<std::vector<std::string> >::~ValueArray() {
    value->clear();
    delete value;
}

template<typename T>
ValueArray<T>::~ValueArray() {}

template<typename T>
void ValueArray<T>::set(T* val) {
    value = val;
}

template<typename T>
void ValueArray<T>::set(T* val, const size_t dim[], const std::string& un) {
    value = val;
    for (auto i = 0; i < dims.size(); i++) {
        dims[i] = dim[i];
    }
    unit = un;
}

template<typename T>
void ValueArray<T>::set(T* val, std::string &un) {
    value = val;
    unit = un;
}

template<typename T>
ValueArray<T>::ValueArray(SUBTYPE st, const size_t &ndim, const size_t dim[], const std::string& un, const int& precision) :
        ValueItem(st, un, precision), ndim(ndim){
    dims.resize(ndim);
    for (auto i = 0; i < ndim; i++) {
        dims[i] = dim[i];
    }
}

template<typename T>
ValueArray<T>::ValueArray(SUBTYPE st, const size_t &ndim, const std::string& un, const int& precision) :
        ValueItem(st, un, precision), ndim(ndim){
    dims.resize(ndim);
}

template<typename T>
ValueArray<T>::ValueArray(T* val, const size_t& ndim, const size_t dim[], SUBTYPE st, const std::string& unit, const int& precision) :
        ValueItem(st, unit, precision), ndim(ndim) {
    dims.resize(ndim);
    for (auto i = 0; i < ndim; i++) {
        dims[i] = dim[i];
    }
    value = val;
}

/*template<typename T>
ValueArray<T>::~ValueArray() {
    value.clear();
}*/

template<typename T>
T& ValueArray<T>::operator[](const size_t& idx) const {
    if (idx >= ndim)
        return;
    return value[idx];
}

/*template<typename T>
T& ValueArray<T>::getValue() const {
    return value;
}*/

/*template<typename T>
void ValueArray<T>::get(std::vector<T> &val) const {
    val = value;
}
template<typename T>
void ValueArray<T>::get(std::vector<T> &val, std::string &un) const {
    val = value;
    un = unit;
}*/

template<typename T>
void ValueArray<T>::get(T* val, size_t &ndim, size_t (&dim)[]) {
    if (val == nullptr)
        return;
    val = value;
    ndim = this->ndim;
    dim = this->dim;
}
template<typename T>
void ValueArray<T>::get(T* val, size_t& ndim, size_t (&dim)[], std::string &un) {
    get(val, ndim, dim);
    un = unit; 
}
} // communication
} // datatypes
