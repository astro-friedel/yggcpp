#pragma once
#include <string>
#include "value_t.h"

namespace communication {
namespace datatypes {

template<typename T>
class Value {
public:
    Value() = delete;
    explicit Value(const T &val, const std::string &unit="");
    ~Value() = default;
    void get(T &val, std::string& un) const;
    value_t* toValue_t() const;
    T getValue() const;
    std::string getUnit() const;
private:
    T value;
    std::string unit;
};

template<typename T>
Value<T>* toValue(const value_t* val);


template<typename T>
Value<T>::Value(const T &val, const std::string &unit) {
    value = val;
    this->unit = unit;
}

template<typename T>
void Value<T>::get(T &val, std::string &un) const {
    val = value;
    un = unit;
}

template<typename T>
T Value<T>::getValue() const {
    return value;
}

template<typename T>
std::string Value<T>::getUnit() const {
    return unit;
}



} // communication
} // datatype
