name: Test of package installation & execution
'on':
  push:
    branches-ignore:
     - gh-pages
    tags:
     - '*'
  schedule:
  - cron: 0 10 * * 1
jobs:
  build_pip:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-install: [pip]
        install-zmq: [true, false]
        exclude:
          - os: windows-latest
            install-zmq: false
      fail-fast: false
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Install dependencies on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libc6-dbg gdb valgrind libboost-log-dev libboost-python-dev lcov libcmocka-dev 
          sudo apt upgrade --fix-missing
          valgrind --version
          # sudo apt autoremove -y
          # sudo apt autoclean -y
          echo "ASAN_OPTIONS=detect_odr_violation=0" >> $GITHUB_ENV
      - name: Install dependencies on Mac
        if: matrix.os == 'macos-latest'
        run: |
          brew install llvm boost boost-python3 cmocka lcov gnutls
      - name: Install dependencies on Windows
        if: matrix.os == 'windows-latest'
        run: |
          vcpkg.exe install cmocka --triplet x64-windows
          vcpkg.exe install boost --triplet x64-windows
          # vcpkg.exe install boost-python --triplet x64-windows
      - name: Install ZeroMQ and MPI dependencies on Ubuntu
        if: matrix.os == 'ubuntu-latest' && matrix.install-zmq
        run: |
          sudo apt-get update
          sudo apt-get install -y libzmq3-dev libgomp1 mpich
          sudo apt upgrade --fix-missing
          # sudo apt autoremove -y
          # sudo apt autoclean -y
      - name: Install ZeroMQ and MPI dependencies on Mac
        if: matrix.os == 'macos-latest' && matrix.install-zmq
        run: |
          brew install zeromq libomp open-mpi
      - name: Install ZeroMQ and MPI dependencies on Windows
        if: matrix.os == 'windows-latest' && matrix.install-zmq
        run: |
          vcpkg.exe install zeromq --triplet x64-windows
      - name: Setup Python
        uses: actions/setup-python@v2
        # if: matrix.os != 'windows-latest'
      - name: Fix Python path on mac
        if: matrix.os == 'macos-latest'
        run: |
          tee -a ~/.profile <<<'export PATH="${pythonLocation}/bin:${PATH}"'
      - name: Install Python dependencies
        run: python -m pip install -r requirements.txt
      - name: Check for numpy
        run: |
          python -c "import sys; print(sys.executable)"
          python -c "import numpy; print(numpy.get_include())"
      - name: Configure
        if: matrix.os == 'windows-latest'
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Debug "-DPython3_ROOT_DIR=${Env:pythonLocation}" "-DPython3_EXECUTABLE=${Env:pythonLocation}\python.exe" -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/_install "-DCMAKE_PREFIX_PATH=${Env:VCPKG_INSTALLATION_ROOT}\installed\x64-windows" -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DBUILD_PYTHON_LIBRARY=OFF
          # cmake .. -DCMAKE_BUILD_TYPE=Debug "-DPython3_ROOT_DIR=${Env:pythonLocation}" "-DPython3_EXECUTABLE=${Env:pythonLocation}\python.exe" -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/_install "-DCMAKE_TOOLCHAIN_FILE=${Env:VCPKG_INSTALLATION_ROOT}\scripts\buildsystems\vcpkg.cmake" -DVCPKG_PREFER_SYSTEM_LIBS=ON -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DBUILD_PYTHON_LIBRARY=OFF
      - name: Configure
        if: matrix.os != 'windows-latest'
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Debug -DPython3_ROOT_DIR=${pythonLocation} -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/_install -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DYGG_BUILD_ASAN=ON -DYGG_BUILD_UBSAN=ON -DBUILD_PYTHON_LIBRARY=OFF
      - name: Build
        run: |
          cd build
          cmake --build . --config Debug
      - name: Run test directly
        if: matrix.os == 'windows-latest'
        run: |
          cd build
          ./unittest
      - name: Test
        run: |
          cd build
          ctest -C Debug --output-on-failure -VV
  build_conda:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-install: [conda]
      fail-fast: false
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Patch gtest
        run: |
          cd thirdparty/gtest
          git apply ../gtest.patch
          cd ../..
      - name: Set up MSVC Compiler on windows
        uses: ilammy/msvc-dev-cmd@v1
        if: matrix.os == 'windows-latest'
        with:
          toolset: 14.0
      - name: Set up miniconda test environment
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: yggdrasil
          environment-file: environment.yml
          auto-update-conda: true
          channels: conda-forge
          channel-priority: strict
      - name: Install LLVM on mac for OpenMP
        if: matrix.os == 'macos-latest'
        run: |
          conda install llvm -y
      - name: Check for numpy
        run: |
          python -c "import sys; print(sys.executable)"
          python -c "import numpy; print(numpy.get_include())"
      - name: Configure windows
        if: matrix.os == 'windows-latest'
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Debug -DYGG_ENABLE_COVERAGE=ON -DCMAKE_INSTALL_PREFIX=../devel "-DCMAKE_PREFIX_PATH=${Env:CONDA_PREFIX}" -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DBUILD_PYTHON_LIBRARY=OFF
      - name: Configure linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Debug -DYGG_ENABLE_COVERAGE=ON -DCMAKE_INSTALL_PREFIX=../devel -DCMAKE_PREFIX_PATH=$CONDA_PREFIX -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DYGG_BUILD_ASAN=ON -DYGG_BUILD_UBSAN=ON -DYGGDRASIL_DISABLE_PYTHON_C_API=ON -DBUILD_PYTHON_LIBRARY=OFF
      - name: Configure mac
        if: matrix.os == 'macos-latest'
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Debug -DYGG_ENABLE_COVERAGE=ON -DCMAKE_INSTALL_PREFIX=../devel -DCMAKE_PREFIX_PATH=$CONDA_PREFIX -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DYGG_BUILD_ASAN=ON -DYGG_BUILD_UBSAN=ON -DBUILD_PYTHON_LIBRARY=OFF
      - name: Build
        run: |
          cd build
          cmake --build . --config Debug
      - name: Run test directly
        if: matrix.os == 'windows-latest'
        run: |
          cd build
          ./unittest
      - name: Test
        run: |
          cd build
          ctest -C Debug --output-on-failure --verbose
      - name: Upload coverage report
        uses: codecov/codecov-action@v1
        with:
          name: ${{ matrix.os }}-${{ matrix.python-install }}
          token: ${{ secrets.CODECOV_TOKEN }}
          file: build/coverage/coverage.info
          # directory: build/Testing/CoverageInfo
          functionalities: gcov